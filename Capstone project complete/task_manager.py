#This is the Capstone project where the requirements are in a separate pdf file.
#The reports are being generated by display statistics function.


import os
from datetime import datetime
import time

# Declaring variables
current_path = os.path.dirname(__file__)
delay_menu = 3
delay_login_exit = 1
first_login = True

# Function to handle user login
def login():
    print("Welcome to the Task Manager!")
    print("\nPlease login...\n")

    while True:
        usern = input("Username: ")
        passw = input("Password: ")

        user_exists = any(user[0] == usern and user[1] == passw for user in users)

        if user_exists:
            print("Logging in...")
            time.sleep(delay_login_exit)
            print("\nWelcome!")
            print("Enter \"-1\" at any time to return to the Main Menu")
            time.sleep(delay_login_exit + 1)
            return usern
        else:
            print("\nUsername or password incorrect. Please retry.\n")

# Function to register new users
def reg_user():
    if username == "admin":
        print("\nRegister User\nPlease enter the details of the new user")

        while True:
            new_user = input("Username: ").strip()
            if new_user == "":
                print("\nPlease enter a valid username.\n")
            elif new_user == "-1":
                break
            elif any(user[0] == new_user for user in users):
                print("\nThe username already exists. Please choose a different username.\n")
            else:
                break

        if new_user != "-1":
            while True:
                new_pass1 = input("Password: ").strip()
                new_pass2 = input("Confirm Password: ").strip()

                if new_pass1 == new_pass2:
                    users.append([new_user, new_pass1])
                    with open(os.path.join(current_path, "user.txt"), "a") as user_file:
                        user_file.write(f"\n{new_user}, {new_pass1}")
                    print(f"\nNew user '{new_user}' has been added.")
                    break
                else:
                    print("\nPasswords do not match. Please retry.\n")

    else:
        print("\nYou are not authorized to register new users.\n")

    print(f"\nReturning to menu in {delay_menu} seconds...")
    time.sleep(delay_menu)

# Function to add a new task
def add_task():
    print("\nAdd Task\nPlease enter the details of the new task")

    info_title = ["Username:", "Task Title:", "Description:", "Date Assigned:", "Due Date:", "Completed:"]
    info = []

    for title in info_title:
        while True:
            data = input(f"{title} ").strip()
            if data == "":
                print("\nInvalid input. Please try again.\n")
            elif data == "-1":
                return
            else:
                info.append(data)
                break

    with open(os.path.join(current_path, "tasks.txt"), "a") as task_file:
        task_file.write("\n" + ", ".join(info))

    print("\nNew task has been added:")
    for title, data in zip(info_title, info):
        print(f"{title}\t{data}")

    print(f"\nReturning to menu in {delay_menu} seconds...")
    time.sleep(delay_menu)

# Function to view all tasks
def view_all():
    print("\nView All Tasks")

    if tasks:
        for task in tasks:
            print("----------------------------------------------------")
            for title, data in zip(["Username:", "Task Title:", "Description:", "Date Assigned:", "Due Date:", "Completed:"], task):
                print(f"{title}\t{data}")
        print("----------------------------------------------------")
    else:
        print("No tasks found.")

    print(f"\nReturning to menu in {delay_menu} seconds...")
    time.sleep(delay_menu)

# Function to view tasks assigned to the current user
def view_mine():
    print("\nView My Tasks")

    my_tasks = [task for task in tasks if task[0] == username]

    if my_tasks:
        for i, task in enumerate(my_tasks, 1):
            print(f"\nTask {i}")
            print("----------------------------------------------------")
            for title, data in zip(["Username:", "Task Title:", "Description:", "Date Assigned:", "Due Date:", "Completed:"], task):
                print(f"{title}\t{data}")
        print("----------------------------------------------------")
        edit_task(my_tasks)
    else:
        print("No tasks found for the current user.")

    print(f"\nReturning to menu in {delay_menu} seconds...")
    time.sleep(delay_menu)

# Function to edit tasks assigned to the current user
def edit_task(my_tasks):
    while True:
        try:
            task_num = int(input("Please enter a task number to edit: ").strip())
            if task_num == -1:
                return
            elif 1 <= task_num <= len(my_tasks):
                break
            else:
                print("\nInvalid task number. Please try again.\n")
        except ValueError:
            print("\nInvalid input. Please enter a number.\n")

    task_to_edit = my_tasks[task_num - 1]

    if task_to_edit[5] == "Yes":
        print("\nThe task has already been completed. Editing is not allowed.")
    else:
        print("\nEditing Task...")
        new_username = input(f"Edit Username ({task_to_edit[0]}): ").strip() or task_to_edit[0]
        new_due_date = input(f"Edit Due Date ({task_to_edit[4]}): ").strip() or task_to_edit[4]

        index_to_edit = tasks.index(task_to_edit)
        tasks[index_to_edit] = [new_username, *task_to_edit[1:4], new_due_date, *task_to_edit[5:]]

        with open(os.path.join(current_path, "tasks.txt"), "w") as task_file:
            task_file.write("\n".join([", ".join(task) for task in tasks]))

        print("\nTask edited successfully.")

# Function to display statistics
def display_statistics():
    if username == "admin":
        generate_reports()
        print(f"\nOpening task_overview.txt in {delay_menu} seconds...")
        time.sleep(delay_menu)

        with open(os.path.join(current_path, "task_overview.txt")) as file:
            print(file.read())

        print(f"\nOpening user_overview.txt in {delay_menu} seconds...")
        time.sleep(delay_menu)

        with open(os.path.join(current_path, "user_overview.txt")) as file:
            print(file.read())
    else:
        print("\nYou are not authorized to view statistics.")

    print(f"\nReturning to menu in {delay_menu} seconds...")
    time.sleep(delay_menu)

# Function to generate reports
def generate_reports():
    if username == "admin":
        total_tasks = len(tasks)
        num_completed = sum(1 for task in tasks if task[5] == "Yes")
        num_incomplete = total_tasks - num_completed
        num_inc_overdue = sum(1 for task in tasks if task[5] == "No" and datetime.strptime(task[4], '%d %b %Y').date() < datetime.now().date())

        with open(os.path.join(current_path, "task_overview.txt"), "w") as file:
            file.write(f"Task Overview - Statistics relating to all tasks in task_manager.py\n\n")
            file.write(f"Total Tasks:\t\t{total_tasks}\nCompleted Tasks:\t{num_completed}\nIncomplete Tasks:\t{num_incomplete}\nOverdue Tasks:\t\t{num_inc_overdue}\n")
            file.write(f"Portion Incomplete:\t{round(num_incomplete / total_tasks * 100, 2)}%\n")
            file.write(f"Portion Overdue:\t{round(num_inc_overdue / total_tasks * 100, 2)}%\n")

        user_tasks = {user[0]: sum(1 for task in tasks if task[0] == user[0]) for user in users}

        with open(os.path.join(current_path, "user_overview.txt"), "w") as file:
            file.write("User Overview - Statistics relating to all users in task_manager.py\n\n")
            file.write(f"Total Users:\t\t{len(users)}\n")
            file.write(f"Total Tasks:\t\t{total_tasks}\n\n")
            for user, task_count in user_tasks.items():
                file.write(f"User:\t{user}\n")
                file.write(f"User Tasks:\t{task_count}\n")
                file.write(f"Portion Total Tasks:\t{round(task_count / total_tasks * 100, 2)}%\n")
                if task_count > 0:
                    file.write(f"Portion Completed:\t{round(sum(1 for task in tasks if task[0] == user and task[5] == 'Yes') / task_count * 100, 2)}%\n")
                    file.write(f"Portion Incomplete:\t{round(sum(1 for task in tasks if task[0] == user and task[5] == 'No') / task_count * 100, 2)}%\n")
                else:
                    file.write("Portion Completed:\t0%\n")
                    file.write("Portion Incomplete:\t0%\n")
                if task_count > 0:
                    file.write(f"Portion Overdue:\t{round(sum(1 for task in tasks if task[0] == user and task[5] == 'No' and datetime.strptime(task[4], '%d %b %Y').date() < datetime.now().date()) / task_count * 100, 2)}%\n\n")
                else:
                    file.write("Portion Overdue:\t0%\n\n")

        print("\nReports have been generated: task_overview.txt, user_overview.txt")
    else:
        print("\nYou are not authorized to generate reports.")

# Main program loop
while True:
    users = [line.strip().split(", ") for line in open(os.path.join(current_path, "user.txt"), "r")]
    tasks = [line.strip().split(", ") for line in open(os.path.join(current_path, "tasks.txt"), "r") if len(line.strip().split(", ")) == 6]

    if first_login:
        username = login()
        first_login = False

    if username == "admin":
        print("\nPlease select one of the following options:")
        print("r - register user\na - add task\nva - view all tasks\nvm - view my tasks\nds - display statistics\ne - exit")
    else:
        print("\nPlease select one of the following options:")
        print("a - add task\nva - view all tasks\nvm - view my tasks\ne - exit")

    menu = input("").strip()

    if menu == "r":
        reg_user()
    elif menu == "a":
        add_task()
    elif menu == "va":
        view_all()
    elif menu == "vm":
        view_mine()
    elif menu == "ds":
        display_statistics()
    elif menu == "gr":
        generate_reports()# I have added this line but actually it does nothing , the actual reports are generated by display statistics function.
    elif menu == "e":
        print("\nExiting...")
        time.sleep(delay_login_exit)
        break
    else:
        print("\nInvalid input. Please retry.")
        time.sleep(delay_login_exit)

# I have tried to fix and generate this code according to the requirement of task 17.
